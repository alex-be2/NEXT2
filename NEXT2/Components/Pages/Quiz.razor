@page "/Quiz/{current_node_id:int}/{current_session_id:int}"
@using NEXT2.Data
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@rendermode InteractiveServer
@layout MainLayout

<div class="centre-content container-centre margin-t-50">
    @*progress bar*@
    <div class="progress-b">
        <p>@getCompletion() complete</p>
    </div>
    @*questions container*@
    <div class="white-container">
        <h2>Section @getSecNum()</h2>
        <hr />
        @foreach (Question currentQuestion in curr_questions)
        {
            string rName = currentQuestion.QuestionID.ToString();
            <div style="padding: 30px;">
                <p class="text-l">@currentQuestion.QuestionText</p>
                <div class="container-space-between">
                    @foreach (Answer answer in getAnswers(currentQuestion.QuestionID))
                    {
                        @if (getChecked(answer.AnswerID))
                        {
                            <label class="container">
                                <input type="radio" checked name="@rName" @onclick="() => selectAnswer(answer)">
                                <span class="selection">@answer.AnswerText</span>
                            </label>
                        }
                        else
                        {
                            <label class="container">
                                <input type="radio" name="@rName" @onclick="() => selectAnswer(answer)">
                                <span class="selection">@answer.AnswerText</span>
                            </label>
                        }
                    }
                </div>
            </div>
            <hr />
        }

        @if (missingAnswers)
        {
            <p style="color:red">Please answer all the questions before continuing</p>
        }

        <div class="container-space-between height-100">
            <button class="white-button margin-t-50" @onclick="PrevNode"><i class="fa-solid fa-caret-left"></i> Back</button>
            <button class="white-button margin-t-50" @onclick="NextNode">Next <i class="fa-solid fa-caret-right"></i></button>
        </div>
    </div>
    <br />
</div>

@code {
    [Parameter] public int current_node_id { get; set; }
    [Parameter] public int current_session_id { get; set; }

    private List<Question> curr_questions = new List<Question> { };
    private List<Answer> curr_answers = new List<Answer> { };
    private List<UserAnswer> all_user_answers = new List<UserAnswer> { };
    private Answer[] user_answers = new Answer[3];
    Node current_node = new Node();

    private bool missingAnswers = false;
    private bool savedAnswers = false;

    protected override async Task OnInitializedAsync()
    {
        getCurrs();

    }
    protected void getCurrs()
    {
        List<Question> all_questions = DbContext.QuestionsNew.ToList();
        List<Answer> all_answers = DbContext.AnswersNew.ToList();
        List<Node> all_nodes = DbContext.NodesNew.ToList();
        all_user_answers = DbContext.UserAnswersNew.ToList();

        foreach (Node n in all_nodes)
        {
            if (n.NodeID == current_node_id)
            {
                current_node = n;

                foreach (Question q in all_questions)
                {
                    if (q.QuestionID == n.Question1ID || q.QuestionID == n.Question2ID || q.QuestionID == n.Question3ID)
                    {
                        curr_questions.Add(q);
                    }
                }
                break;
            }
        }

        foreach (Question q in curr_questions)
        {
            foreach (Answer a in all_answers)
            {
                if (a.QuestionID == q.QuestionID)
                {
                    curr_answers.Add(a);
                }
            }
        }

        foreach (UserAnswer a in all_user_answers)
        {
            if (a.NodeID == current_node_id && a.SessionID == current_session_id)
            {
                savedAnswers = true;

                if (a.QuestionID == curr_questions[0].QuestionID)
                {
                    user_answers[0] = GetAnswer(a.AnswerID, all_answers);
                }
                else if (a.QuestionID == curr_questions[1].QuestionID)
                {
                    user_answers[1] = GetAnswer(a.AnswerID, all_answers);
                }
                else if (a.QuestionID == curr_questions[2].QuestionID)
                {
                    user_answers[2] = GetAnswer(a.AnswerID, all_answers);
                }
            }
        }
    }

    protected bool getChecked(int id)
    {
        if (savedAnswers)
        {
            foreach (Answer a in user_answers)
            {
                if (a.AnswerID == id)
                {
                    return true;
                }
            }
        }

        return false;
    }

    protected UserAnswer getUserAnswer (int id)
    {
        foreach (UserAnswer answer in all_user_answers)
        {
            if (answer.AnswerID == id)
            {
                return answer;
            }
        }
        return new UserAnswer();
    }

    protected Answer GetAnswer(int id, List<Answer> answer_list)
    {
        foreach (Answer answer in answer_list)
        {
            if (answer.AnswerID == id)
            {
                return answer;
            }
        }
        return new Answer();
    }

    protected List<Answer> getAnswers(int q_id)
    {
        List<Answer> answers = new List<Answer> { };

        foreach (Answer a in curr_answers)
        {
            if (a.QuestionID == q_id) { answers.Add(a); }
        }

        return answers;
    }

    protected string getSecNum()
    {
        switch (current_node_id)
        {
            case 1: return "1";
            case 2: return "2";
            case 3: return "2";
            case 4: return "3";
            case 5: return "3";
            case 6: return "3";
            case 7: return "3";
            case 8: return "4";
            case 9: return "4";
            case 10: return "4";
            case 11: return "4";
            case 12: return "4";
            case 13: return "4";
            case 14: return "4";
            case 15: return "4";
            default: return "";
        }
    }

    protected string getCompletion()
    {
        // return (Convert.ToInt32(getSecNum()) / 4).ToString();
        return "";
    }

    protected void NextNode()
    {
        int path1 = 0;
        int path2 = 0;

        foreach (Answer a in user_answers)
        {
            if (a != null)
            {
                if (a.Path == current_node.Path1)
                {
                    path1 += 1;
                }
                else if (a.Path == current_node.Path2)
                {
                    path2 += 1;
                }
            }
        }

        // user_answers[0].AnswerText != "" && user_answers[1].AnswerText != "" && user_answers[2].AnswerText != ""

        if (path1+path2 == 3)
        {
            updateDB();
            missingAnswers = false;
            if (path1 > path2)
            {
                if (current_node.Path1 < 1000)
                {
                    Navigation.NavigateTo($"/Quiz/{current_node.Path1}");
                }
                else
                {
                    Navigation.NavigateTo($"/Career/{current_node.Path1}");
                }
            }
            else
            {
                if (current_node.Path1 < 1000)
                {
                    Navigation.NavigateTo($"/Quiz/{current_node.Path2}");
                }
                else
                {
                    Navigation.NavigateTo($"/Career/{current_node.Path2}");
                }
            }
        }
        else { missingAnswers = true; }
    }

    protected void updateDB()
    {
        bool QuestionsExist = false;

        foreach (UserAnswer a in all_user_answers)
        {
            if (current_node_id == a.NodeID && current_session_id == a.SessionID)
            {
                QuestionsExist = true;
                break;
            }
        }

        if (QuestionsExist)
        {
            UpdateUserAnswer();
        }
        else
        {
            foreach (Answer a in user_answers)
            {
                UserAnswer x = new UserAnswer();
                x.SessionID = current_session_id;
                x.NodeID = current_node_id;
                x.QuestionID = a.QuestionID;
                x.AnswerID = a.AnswerID;

                AddUserAnswers();
            }
        }

    }

    private async Task AddUserAnswers()
    {
        foreach (Answer a in user_answers)
        {
            UserAnswer x = new UserAnswer();
            x.SessionID = current_session_id;
            x.NodeID = current_node_id;
            x.QuestionID = a.QuestionID;
            x.AnswerID = a.AnswerID;

            DbContext.UserAnswersNew.Add(x);

        }

        await DbContext.SaveChangesAsync();

    }

    private async Task UpdateUserAnswer()
    {
        foreach (Answer a in user_answers)
        {
            UserAnswer x = getUserAnswer(a.AnswerID);
            UserAnswer existingUserAnswer = await DbContext.UserAnswersNew.FindAsync(x.UserAnswerID);
            if (existingUserAnswer != null)
            {
                if (existingUserAnswer.AnswerID != x.AnswerID)
                {
                    existingUserAnswer.AnswerID = x.AnswerID;
                    DbContext.UserAnswersNew.Update(existingUserAnswer);
                }
            }
        }
       
        await DbContext.SaveChangesAsync();
    }

    protected void PrevNode()
    {
        if (current_node.ParentNodeId == 0)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            Navigation.NavigateTo($"/Quiz/{current_node.ParentNodeId}/{current_session_id}");
        }
    }

    protected void selectAnswer(Answer a)
    {
        if (a.QuestionID == curr_questions[0].QuestionID)
        {
            user_answers[0] = a;
        }
        else if (a.QuestionID == curr_questions[1].QuestionID)
        {
            user_answers[1] = a;
        }
        else if (a.QuestionID == curr_questions[2].QuestionID)
        {
            user_answers[2] = a;
        }
    }

}


@*<hr />
    <div style="padding: 30px;">
        <h4 class="text-l">Question 2</h4>
        <p class="text-l">How much experience do you have working in a team?</p>
        <div class="slider-container">
            <div class="container-space-between">
                <p style="width: 10%"> 1</p>
                <p style="width: 10%"> 2</p>
                <p style="width: 10%"> 3</p>
                <p style="width: 10%"> 4</p>
                <p style="width: 10%"> 5</p>
                <p style="width: 10%"> 6</p>
                <p style="width: 10%"> 7</p>
                <p style="width: 10%"> 8</p>
                <p style="width: 10%"> 9</p>
                <p style="width: 10%">10</p>
            </div>
            <input type="range" min="1" max="10" class="slider"/>
        </div>
    </div> *@