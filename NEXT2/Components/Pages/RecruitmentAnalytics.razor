@page "/RecruitmentAnalytics/{user_id:int}"
@using NEXT2.Components.Layout
@using NEXT2.Components.Models
@layout ResultsLayout
@using NEXT2.Data
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext
@rendermode InteractiveServer

<div style="margin: 50px">

    <h2 class="text-l" style="margin-left: 50px">Recruitment Analytics</h2>

    <div class="container-row">
        <div class="white-container container-column" style="margin: 50px;">
            <h4 class="text-l">Top Departments</h4>
            <hr />
            <div class="container-space-between" style="align-items:center">
                <p>Name of Department</p>
                <p>Number of recommendations </p>
            </div>
            <hr />
            @foreach (KeyValuePair<Departments,int> dept_kvp in GetTopDepartments())
            {
                <div class="container-space-between selectable-container" @onclick="() => displayTopDeptRoles(dept_kvp.Key)">
                    <p>@dept_kvp.Key.DepartmentName</p>
                    <p>@dept_kvp.Value</p>
                </div>
            }
        </div>
        <div class="white-container container-column" style="margin: 50px;">
            @if (dept_Role_scores.Count() == 0)
            {
                <p>Select a department to view its top roles</p>
            }
            else
            {
                <h4>@selected_dept.DepartmentName</h4>
                <hr />
                <div class="container-space-between" style="align-items:center">
                    <p>Name of Role</p>
                    <p>Number of recommendations </p>
                </div>
                <hr />
                foreach(KeyValuePair<Role,int> dept_role_kvp in dept_Role_scores)
                {
                    <div class="container-space-between">
                        <p>@dept_role_kvp.Key.RoleName</p>
                        <p>@dept_role_kvp.Value</p>
                    </div>
                }
            }
            
        </div>
    </div>
    <div class="container-row margin-t-50" >
        <div class="white-container container-column" style="margin: 50px;">
            <h4 class="text-l">Overall Top Roles</h4>
            <hr />
            <div class="container-space-between" style="align-items:center">
                <p>Name of Role</p>
                <p>Number of recommendations </p>
            </div>
            <hr />
            @foreach (KeyValuePair<string,int> role_kvp in GetTopRolesDetails())
            {
                <div class="container-space-between">
                    <p>@role_kvp.Key</p>
                    <p>@role_kvp.Value</p>
                </div>
            }
        </div>
        <div class="white-container container-column" style="margin: 50px;">
            <h4 class="text-l">Top Candidates</h4>
            <hr />
            <div class="container-space-between" style="align-items:center">
                <p>Name of Candidate</p>
                <p>Role</p>
                <p>%</p>
            </div>
            <hr />
            @foreach (KeyValuePair<User, Dictionary<Role, decimal>> user_kvp in GetTopCandidates())
            {
                <div class="container-space-between">
                    <p>@user_kvp.Key.Email</p>
                    @foreach (KeyValuePair<Role,decimal> kvp in user_kvp.Value )
                    {
                        <p>@kvp.Key.RoleName</p>
                        <p>@kvp.Value %</p>
                    }
                </div>
            }
        </div>
    </div>
</div>
    


@code {
    [Parameter] public int user_id { get; set; }

    public UserModel userModel = new UserModel();

    [CascadingParameter] public EventCallback<UserModel> userLayout { get; set; }

    private string email;

    private List<User> users = new List<User>();

    private List<Result> results = new List<Result>();

    private List<Role> roles = new List<Role>();

    private List<Departments> departments = new List<Departments>();

    public Dictionary<Role, int> dept_Role_scores = new Dictionary<Role, int>();
    public Departments selected_dept = new Departments();


    protected override void OnInitialized()
    {
        users = DbContext.Users.ToList();

        results = DbContext.Results.ToList();

        roles = DbContext.Roles.ToList();

        departments = DbContext.Departments.ToList();

        foreach (User user in users)
        {
            if (user_id == user.userID)
            {
                email = user.Email;
                break;
            }
        }

        userModel.userID = user_id;
        userModel.email = email;
        userLayout.InvokeAsync(userModel);
    }

    private Dictionary<string, int> GetTopRolesDetails()
    {
        Dictionary<string, int> roleDesc = new Dictionary<string, int>();

        foreach(Role r in roles)
        {
            foreach (KeyValuePair<int,int> topRole in GetTopRoles(false))
            {
                if (topRole.Key == r.RoleID)
                {
                    roleDesc.Add(r.RoleName, topRole.Value);
                }
            }            
        }

        var sortedDictionary = roleDesc.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);

        return sortedDictionary;

    }

    private void displayTopDeptRoles(Departments dept)
    {
        selected_dept = dept;

        dept_Role_scores = new Dictionary<Role, int>();

        Dictionary<int,int> topRoles = GetTopRoles(true);

        foreach (KeyValuePair<int,int> kvp in topRoles)
        {
            if (checkRoleDept(kvp.Key,dept))
            {
                dept_Role_scores.Add(getRoleFromID(kvp.Key), kvp.Value);
            }
        }
    }

    public Role getRoleFromID(int id)
    {
        foreach (Role r in roles)
        {
            if (r.RoleID == id) { return r; }
        }
        return new Role();
    }

    private bool checkRoleDept(int roleID, Departments dept)
    {
        Role this_role = new Role();

        foreach (Role r in roles)
        {
            if (r.RoleID == roleID)
            {
                this_role = r;
                break;
            }
        }

        if (this_role.FinalNodeID == dept.NodeID) { return true; }
        return false;
    }

    private Dictionary<int,int> GetTopRoles(bool all)
    {
        int currentCount = 0;
        bool role1exists = false;
        bool role2exists = false;
        bool role3exists = false;


        Dictionary<int, int> roleCount = new Dictionary<int, int>();

        foreach (Result r in results)
        {
            foreach (KeyValuePair<int,int> kvp in roleCount)
            {
                if (kvp.Key == r.Role1ID)
                {
                    currentCount = kvp.Value;

                    roleCount[kvp.Key] = currentCount + 1;

                    role1exists = true;
                }
                if (kvp.Key == r.Role2ID)
                {
                    currentCount = kvp.Value;

                    roleCount[kvp.Key] = currentCount + 1;

                    role2exists = true;
                }
                if (kvp.Key == r.Role3ID)
                {
                    currentCount = kvp.Value;

                    roleCount[kvp.Key] = currentCount + 1;

                    role3exists = true;
                }
            }

            if (!role1exists)
            {
                roleCount.Add(r.Role1ID, 1);
            }
            if (!role2exists)
            {
                roleCount.Add(r.Role2ID, 1);
            }
            if (!role3exists)
            {
                roleCount.Add(r.Role3ID, 1);
            }
            role1exists = false;
            role2exists = false;
            role3exists = false;
        }

        var sortedDictionary = roleCount.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);

        if (all)
        {
            return sortedDictionary;
        }
        else
        {
            var first5 = sortedDictionary.Take(5).ToDictionary(x => x.Key, x => x.Value);

            return first5;
        }
    }

    private Dictionary<Departments,int> GetTopDepartments()
    {
        Dictionary<Departments, int> departmentScores = new Dictionary<Departments, int>();

        foreach(Departments dept in departments)
        {
            departmentScores.Add(dept, 0);
        }

        foreach (Result result in results)
        {
            departmentScores[getDepartment(result.Role1ID)] += 1;
            departmentScores[getDepartment(result.Role2ID)] += 1;
            departmentScores[getDepartment(result.Role3ID)] += 1;
        }

        var sortedDictionary = departmentScores.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);

        var first5 = sortedDictionary.Take(5).ToDictionary(x => x.Key, x => x.Value);

        return first5;
    }

    public Departments getDepartment(int role_id)
    {
        Role this_role = new Role();

        foreach (Role r in roles)
        {
            if (r.RoleID == role_id)
            {
                this_role = r;
                break;
            }
        }

        Departments this_department = new Departments();

        foreach (Departments dept in departments)
        {
            if (dept.NodeID == this_role.FinalNodeID)
            {
                this_department = dept;
            }
        }

        return this_department;
    }
    public Dictionary<User, Dictionary<Role, decimal>> GetTopCandidates()
    {

        Dictionary<User, Dictionary<Role, decimal>> topCandidates = new Dictionary<User, Dictionary<Role, decimal>>();

        foreach (Result r in results)
        {
            User u = GetUserByID(r.UserID);
            if (u.userID == r.UserID)
            {
                Dictionary<Role, decimal> role_dec_pair = new Dictionary<Role, decimal>();
                role_dec_pair.Add(getRoleFromID(r.Role1ID), getPercentage(getRoleFromID(r.Role1ID), r.Role1Score));
                topCandidates.Add(u, role_dec_pair);
            }
        } 
        var sortedDictionary = topCandidates.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);


        var first5 = sortedDictionary.Take(5).ToDictionary(x => x.Key, x => x.Value);

        return first5;
    }

    public User GetUserByID(int? userID)
    {
        foreach (User u in users)
        {
            if (u.userID== userID) { return u; }
        }
        return new User();
    }

    public decimal getPercentage(Role role, int score)
    {
        double pct = 0;

        pct = 50f + (Convert.ToDouble(score) / Convert.ToDouble(role.MaxScore)) * 100f;

        if (pct >= 100) { pct = 97.5f; }

        return Math.Round(Convert.ToDecimal(pct), 1);
    }
}
