@page "/Register/{quizComplete:bool}/{current_session_id:int}"
@using NEXT2.Components.Layout
@layout MainLayout
@using NEXT2.Components.Layout
@using NEXT2.Components.Services
@using NEXT2.Data
@inject ApplicationDbContext DbContext
@inject ApplicationDbContext Db_Context_updater
@inject NavigationManager Navigation
@rendermode InteractiveServer


<div class="centre-content container-centre">
    <h1>Register</h1>
    <p class="margin-t-50">Enter your email address and create a password to create your profile. Once your identity is confirmed, you will be able to manage your profile.</p>
    <label class="required-field margin-t-50 text-l">Email Address:</label>
    <InputText class="auth-input" @bind-Value="@email"></InputText>
    <label class="required-field text-l">Password:</label>
    <InputText class="auth-input" type="password" @bind-Value="@password"></InputText>
    <label class="required-field text-l">Confirm password:</label>
    <InputText class="auth-input" type="password "@bind-Value="@confirmPassword"></InputText>
    @if (alert == 0)
    {
        
    }
    else if (alert == 1)
    {
        <p style="color:red">Email already exists!</p>
    }
    else if(alert == 2)
    {
        <p style="color:red">Passwords do not match!</p>

    }
    else if (alert == 3)
    {
        <p style="color:red">Please complete required fields.</p>

    }
    else if (alert == 4)
    {
        <p style="color:red">Empty Db</p>

    }
    <span class="margin-t-50" style=" padding-top:1px">
        Already have an account?
        <button @onclick="LogIn" class="margin-t-50 auth-a"><b>Log in</b></button>
    </span>
    <div class="container-space-between height-100">
        <a href="" class="white-button margin-t-50 no-link">
            <i class="fa-solid fa-caret-left"></i> Back
        </a>
        <button class="white-button margin-t-50" @onclick="register">Register <i class="fa-solid fa-caret-right"></i></button>
    </div>
    <br />
</div>




@code {

    [Parameter] public int current_session_id { get; set; }
    [Parameter] public bool quizComplete { get; set; }

    private string email = "";
    private string password = "";
    private string confirmPassword;
    private bool uniqueEmail = true;
    private bool passwordMatch = false;
    int alert = 0;
    bool emptyTable = false;

    private List<User> users;

    User newUser = new User();

    int nextUserID = 0;

    List<Result> all_results;

    protected override void OnInitialized()
    {
        try
        {
            users = DbContext.Users.ToList();
            nextUserID = users.Last().userID + 1;
            all_results = DbContext.Results.ToList();
        }
        catch
        {

        }
    }


    protected void register()
    {

        if (email != null && password != null && confirmPassword != null)
        {
            if (password == confirmPassword)
            {
                passwordMatch = true;
            }
            else
            {
                alert = 2;
                StateHasChanged();
            }
            if (emptyTable)
            {
                alert = 4;
                StateHasChanged();
            }
            else
            {
                foreach (User user in users)
                {
                    if (email == user.Email)
                    {
                        uniqueEmail = false;
                        alert = 1;
                        StateHasChanged();
                        break;
                    }
                    else
                    {
                        uniqueEmail = true;
                    }
                }

            }
            if (passwordMatch && uniqueEmail)
            {
                //add to db

                //password = Hasher.Hash(password);

                newUser.Email = email;
                newUser.Password = password;

                //AddUser(newUser);

                DbContext.Users.Add(newUser);
                DbContext.SaveChanges();

                // int newUserID = getUser(newUser.Email).userID;


                if (quizComplete)
                {
                    //updateUserId();
                    Result currentResult = getResult(current_session_id);
                    currentResult.UserID = nextUserID;
                    Db_Context_updater.Results.Update(currentResult);
                    Db_Context_updater.SaveChanges();
                }
                Navigation.NavigateTo($"/Results/{-1}/{quizComplete}/{nextUserID}");

                return;
            }
        }
        else
        {
            alert = 3;
            StateHasChanged();
        }
        if(passwordMatch && uniqueEmail && !emptyTable && email != null && password != null && confirmPassword != null)
        {
            alert = 0;
            StateHasChanged();
        }
    }

    private async Task updateUserId()
    {
        Result currentResult = await DbContext.Results.FindAsync(getResult(current_session_id).ResultID);
        currentResult.UserID = nextUserID;

        DbContext.Results.Update(currentResult);
        await DbContext.SaveChangesAsync();
    }

    private Result getResult(int sessionID)
    {
        foreach (Result result in all_results)
        {
            if (result.SessionID == sessionID)
            {
                return result;
            }
        }
        return new Result();
    }

    private User getUser(string email)
    {
        getUserListasync();
        foreach (User u in users)
        {
            if (u.Email == email)
            {
                return u;
            }
        }
        return null;
    }

    private void LogIn()
    {
        Navigation.NavigateTo($"/Login/{false}/{-1}");
    }

    private async Task AddUser(User newuser)
    {
        DbContext.Users.Add(newuser);
        await DbContext.SaveChangesAsync();
    }

    private async Task getUserListasync()
    {
        users = DbContext.Users.ToList();
    }
}
