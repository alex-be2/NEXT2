@page "/Results/{sessionID:int}/{quizComplete:bool}/{user_id:int}"
@using NEXT2.Components.Layout
@using NEXT2.Components.Models
@layout ResultsLayout
@using NEXT2.Data
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (user_id == -1)
{
    <button @onclick="LogIn" class="login-nav">
        <span style="color:black; border: 0;"><i class="fa-solid fa-user"></i></span>
    </button>
}

@if (quizComplete)
{
    <div class="centre-content container-centre margin-t-50">
        <h1 class="text-l">Results </h1>

        @foreach (KeyValuePair<Role,decimal> kvp in userResults)
        {
            <div class="white-container container-flex">
                <div class="compatibility-bar" style="background: conic-gradient(#@getColour(kvp.Value) @CompatDonut(kvp.Value)deg, white 0deg);">
                    <div class="percent">
                        <div class="container-flex">
                            <p style="font-size: 24pt; margin: 0;">@kvp.Value</p>
                            <p style="font-size: 24pt; margin: 0;">%</p>
                        </div>
                        <p>compatible</p>
                    </div>
                </div>
                <div>
                    <div class="container-space-between" style="align-items: baseline;">
                        <h3 style="margin-left:15px;">@kvp.Key.RoleName</h3>
                        <a href="@kvp.Key.RoleLink" class="white-button">Apply here</a>
                    </div>
                    <div style="width:600px; padding:15px;">
                        <p class="text-l">@kvp.Key.RoleDesc</p>
                    </div>
                </div>

            </div>
        }
    </div>

    <div class="centre-content container-centre">

        @if (user_id == -1)
        {
            <span style=" margin-top:20px">
                <button @onclick="LogIn" class="margin-t-50 auth-a"><b>Log in</b></button>
                to save your results or
                <button @onclick="Register" class="margin-t-50 auth-a"><b>Register</b></button>
                if you dont yet have an account.

            </span>
        }
    </div>
}
else if (!quizComplete)
{
    <div class="centre-content container-centre">
        <span style="margin-top:20px">
            You have not yet completed the quiz. You can do so
            <button @onclick="StartQuiz" class="margin-t-50 auth-a"><b>here</b></button>.
        </span>
    </div>

    @for (int x = 0; x < 3; x++)
    {
        <div class="centre-content container-centre">
            <span style="margin-top:20px">
                <div class="white-container container-flex">
                    <div class="compatibility-bar-empty">
                        <div class="percent">
                            <p style="font-size: 24pt; margin: 0;">%</p>
                            <p>compatible</p>
                        </div>
                    </div>
                    <div>
                        <div class="container-space-between" style="align-items: baseline;">
                            <div class="skeleton-text skeleton-text-short-tall" style="margin-left: 15px"></div>
                        </div>
                        <div style="width:600px; padding:15px;">
                            <div class="container-space-between" style="width: 420px;">
                                <div class="skeleton-text skeleton-text-short"></div>
                                <div class="skeleton-text skeleton-text-short"></div>
                                <div class="skeleton-text skeleton-text-short"></div>
                            </div>
                            <div class="skeleton-text skeleton-text-long" style="margin-top: 5px;"></div>
                            <div class="skeleton-text skeleton-text-long"></div>
                            <div class="skeleton-text skeleton-text-long"></div>
                        </div>
                    </div>

                </div>
            </span>
        </div>
    }
}


@code {
    private string email;
    private List<User> users = new List<User>();
    private Dictionary<Role,decimal> userResults = new Dictionary<Role,decimal>();


    public UserModel userModel = new UserModel();

    [CascadingParameter] public EventCallback<UserModel> userLayout { get;set; }

    protected override void OnInitialized()
    {
        users = DbContext.Users.ToList();
        List<Result> all_Results = DbContext.Results.ToList();
        List<Role> all_Roles = DbContext.Roles.ToList();

        Result result = new Result();

        if (!quizComplete)
        {
            foreach (Result r in all_Results)
            {
                if (r.UserID == user_id)
                {
                    result = r;
                    quizComplete = true;
                    break;
                }
            }
        }
        else
        {
            foreach (Result r in all_Results)
            {
                if (r.SessionID == SessionID || r.UserID == user_id)
                {
                    result = r;
                }
            }
        }


        foreach (User user in users)
        {
            if (user_id == user.userID)
            {
                email = user.Email;
                break;
            }
        }

        if (quizComplete)
        {
            userResults.Add(getRole(result.Role1ID, all_Roles), getPercentage(getRole(result.Role1ID, all_Roles), result.Role1Score));
            userResults.Add(getRole(result.Role2ID, all_Roles), getPercentage(getRole(result.Role2ID, all_Roles), result.Role2Score));
            userResults.Add(getRole(result.Role3ID, all_Roles), getPercentage(getRole(result.Role3ID, all_Roles), result.Role3Score));
        }

        userResults.OrderByDescending(key => key.Value);

        userModel.userID = user_id;
        userModel.email = email;
        userLayout.InvokeAsync(userModel);
    }

    public Role getRole(int roleID, List<Role> all_Roles)
    {
        foreach(Role r in all_Roles)
        {
            if (r.RoleID == roleID)
            {
                return r;
            }
        }
        return new Role();
    }

    public decimal getPercentage(Role role,int score)
    {
        double pct = 0;

        pct = 50f + (Convert.ToDouble(score)/ Convert.ToDouble(role.MaxScore)) * 100f;

        if (pct >= 100) { pct = 97.5f; }

        return Math.Round(Convert.ToDecimal(pct),1);
    }

    public string getColour(decimal? pct)
    {
        if (pct < 25)
        {
            return "f5431b";
        } else if (pct < 50)
        {
            return "f5b71b";
        }
        return "90E596";
    }

    private void StartQuiz()
    {
        List<UserAnswer> all_user_answers = DbContext.UserAnswersNew.ToList();

        int next_session_id = 0;

        if (all_user_answers.Count() != 0)
        {
            next_session_id = all_user_answers.Last().SessionID + 1;
        }

        Navigation.NavigateTo($"/Quiz/{1}/{next_session_id}/{user_id}");
    }

    private void LogIn()
    {
        Navigation.NavigateTo($"/Login/{quizComplete}/{SessionID}");
    }

    private void Register()
    {
        Navigation.NavigateTo($"/Register/{quizComplete}/{SessionID}");
    }

    private decimal? CompatDonut(decimal? percentage)
    {
        decimal? perc = percentage * 360 / 100;
        return perc;
    }

    [Parameter] public int SessionID { get; set; }
    [Parameter] public int user_id { get; set; }
    [Parameter] public bool quizComplete { get; set; }
}

